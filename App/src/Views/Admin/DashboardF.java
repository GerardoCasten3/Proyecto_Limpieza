/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package Views.Admin;

import Controller.ActividadLimpiezaDAO;
import java.sql.*;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;
import java.awt.BorderLayout;
import java.awt.GridBagConstraints;
import javax.swing.JPanel;
import java.sql.SQLException;
import java.util.List;

/**
 *
 * @author gerar
 */
public class DashboardF extends javax.swing.JPanel {

    ActividadLimpiezaDAO actDAO = new ActividadLimpiezaDAO();

    /**
     * Creates new form DashboardF
     */
    public DashboardF() {
        initComponents();
        mostrarResumenCuadrillas();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        dashboardPanel = new javax.swing.JPanel();

        javax.swing.GroupLayout dashboardPanelLayout = new javax.swing.GroupLayout(dashboardPanel);
        dashboardPanel.setLayout(dashboardPanelLayout);
        dashboardPanelLayout.setHorizontalGroup(
            dashboardPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1270, Short.MAX_VALUE)
        );
        dashboardPanelLayout.setVerticalGroup(
            dashboardPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 787, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(dashboardPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(dashboardPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
    private void mostrarResumenCuadrillas() {
        // Limpiar cualquier dato anterior en el panel
        dashboardPanel.removeAll();
        dashboardPanel.revalidate();
        dashboardPanel.repaint();

        try {
            List<Object[]> resumen = actDAO.obtenerResumenPorCuadrilla();

            // Crear un dataset para el gráfico de barras
            DefaultCategoryDataset dataset = new DefaultCategoryDataset();

            for (Object[] row : resumen) {
                String cuadrilla = (String) row[0];
                int actividadesCompletadas = (int) row[1];
                int actividadesNoCompletadas = (int) row[2];

                // Añadir los datos al dataset para actividades completadas y no completadas
                dataset.addValue(actividadesCompletadas, "Completadas", cuadrilla);
                dataset.addValue(actividadesNoCompletadas, "No Completadas", cuadrilla);
            }

            // Crear el gráfico de barras horizontales
            JFreeChart chart = ChartFactory.createBarChart(
                    "Resumen de Actividades por Cuadrilla", // Título del gráfico
                    "Cuadrilla", // Etiqueta del eje X
                    "Número de Actividades", // Etiqueta del eje Y
                    dataset, // Dataset con los datos
                    PlotOrientation.HORIZONTAL, // Orientación horizontal
                    true, // Incluir leyenda
                    true, // Incluir tooltips
                    false // Incluir URLs
            );

            // Personalizar el gráfico (opcional)
            CategoryPlot plot = chart.getCategoryPlot();
            plot.setDomainGridlinePaint(java.awt.Color.GRAY);  // Líneas de cuadrícula en el eje X
            plot.setRangeGridlinePaint(java.awt.Color.GRAY);   // Líneas de cuadrícula en el eje Y

            // Crear el panel para mostrar el gráfico
            ChartPanel chartPanel = new ChartPanel(chart);

            // Ajustar el tamaño del gráfico (por ejemplo, 1000x500)
            chartPanel.setPreferredSize(new java.awt.Dimension(1000, 700)); // Aumentar tamaño

            // Establecer el layout del panel a GridBagLayout para centrar
            dashboardPanel.setLayout(new java.awt.GridBagLayout());
            GridBagConstraints gbc = new GridBagConstraints();

            // Configurar los constraints para centrar el gráfico en el panel
            gbc.gridx = 0;  // Posición en el eje X
            gbc.gridy = 0;  // Posición en el eje Y
            gbc.anchor = java.awt.GridBagConstraints.CENTER;  // Centrar el componente
            dashboardPanel.add(chartPanel, gbc);

            // Actualizar el panel para reflejar los cambios
            dashboardPanel.revalidate();
            dashboardPanel.repaint();

        } catch (SQLException e) {
            e.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(this,
                    "Error al obtener los datos de las cuadrillas: " + e.getMessage(),
                    "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel dashboardPanel;
    // End of variables declaration//GEN-END:variables
}

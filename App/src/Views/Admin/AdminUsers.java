/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package Views.Admin;

import Models.*;
import Controller.*;
import java.util.List;
import java.sql.*;

/**
 *
 * @author gerar
 */
public class AdminUsers extends javax.swing.JPanel {

    UsuarioDAO userDAO = new UsuarioDAO();

    /**
     * Creates new form AdminUsers
     */
    public AdminUsers() {
        initComponents();
        updateUsers(); //Actualizar combo box de usuarios cada vez que entra al Panel
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        title1 = new javax.swing.JLabel();
        usernameLabel = new javax.swing.JLabel();
        passwordRepeatLabel = new javax.swing.JLabel();
        passwordLabel = new javax.swing.JLabel();
        roleLabel = new javax.swing.JLabel();
        usernameTextField = new javax.swing.JTextField();
        passwordField = new javax.swing.JPasswordField();
        passwordRepeatField = new javax.swing.JPasswordField();
        roleComboBox = new javax.swing.JComboBox<>();
        insertButton = new javax.swing.JButton();
        userLabel = new javax.swing.JLabel();
        userComboBox = new javax.swing.JComboBox<>();
        updateButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();

        title1.setFont(new java.awt.Font("Bahnschrift", 1, 28)); // NOI18N
        title1.setText("ADMINISTRAR USUARIOS");

        usernameLabel.setFont(new java.awt.Font("Poppins SemiBold", 0, 14)); // NOI18N
        usernameLabel.setText("Nombre de Usuario:");

        passwordRepeatLabel.setFont(new java.awt.Font("Poppins SemiBold", 0, 14)); // NOI18N
        passwordRepeatLabel.setText("Repetir Contraseña:");

        passwordLabel.setFont(new java.awt.Font("Poppins SemiBold", 0, 14)); // NOI18N
        passwordLabel.setText("Contraseña:");

        roleLabel.setFont(new java.awt.Font("Poppins SemiBold", 0, 14)); // NOI18N
        roleLabel.setText("Rol:");

        usernameTextField.setFont(new java.awt.Font("Poppins SemiBold", 0, 12)); // NOI18N
        usernameTextField.setToolTipText("Ingresa el nombre de usuario a agregar");

        passwordField.setFont(new java.awt.Font("Poppins Medium", 0, 12)); // NOI18N
        passwordField.setToolTipText("Ingresa la contraseña del usuario");

        passwordRepeatField.setFont(new java.awt.Font("Poppins Medium", 0, 12)); // NOI18N
        passwordRepeatField.setToolTipText("Repite la contraseña del usuario");

        roleComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Escoge el rol:", "ADMINISTRADOR", "EMPLEADO" }));
        roleComboBox.setToolTipText("Escoge el rol que se le asignará al usuario");

        insertButton.setBackground(new java.awt.Color(128, 237, 153));
        insertButton.setFont(new java.awt.Font("Bahnschrift", 0, 14)); // NOI18N
        insertButton.setForeground(new java.awt.Color(0, 0, 0));
        insertButton.setText("AGREGAR");
        insertButton.setToolTipText("Agregar un nuevo usuario");
        insertButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertButtonActionPerformed(evt);
            }
        });

        userLabel.setFont(new java.awt.Font("Poppins Medium", 1, 14)); // NOI18N
        userLabel.setText("Usuario:");

        userComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Escoge el usuario:" }));
        userComboBox.setToolTipText("Escoger un usuario para actualizar o eliminar");

        updateButton.setBackground(new java.awt.Color(20, 145, 155));
        updateButton.setFont(new java.awt.Font("Bahnschrift", 0, 14)); // NOI18N
        updateButton.setForeground(new java.awt.Color(0, 0, 0));
        updateButton.setText("ACTUALIZAR");
        updateButton.setToolTipText("Actualizar un usuario");
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });

        deleteButton.setBackground(new java.awt.Color(255, 0, 0));
        deleteButton.setFont(new java.awt.Font("Bahnschrift", 0, 14)); // NOI18N
        deleteButton.setText("ELIMINAR");
        deleteButton.setToolTipText("Elimina un usuario");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(33, 58, 87));

        jLabel2.setFont(new java.awt.Font("Bahnschrift", 1, 36)); // NOI18N
        jLabel2.setText("SISTEMA DE LIMPIEZA");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(413, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(402, 402, 402))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(64, 64, 64)
                .addComponent(jLabel2)
                .addContainerGap(41, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addComponent(updateButton)
                            .addGap(320, 320, 320)
                            .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(passwordRepeatLabel)
                                        .addComponent(passwordLabel)
                                        .addComponent(usernameLabel)
                                        .addComponent(roleLabel))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addGap(45, 45, 45)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(passwordField, javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addComponent(usernameTextField, javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addComponent(passwordRepeatField, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGroup(layout.createSequentialGroup()
                                            .addGap(70, 70, 70)
                                            .addComponent(roleComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(userLabel)
                                    .addGap(44, 44, 44)
                                    .addComponent(userComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 297, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGap(57, 57, 57))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addComponent(insertButton)
                            .addGap(218, 218, 218)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(100, 100, 100)
                        .addComponent(title1)
                        .addGap(109, 109, 109)))
                .addGap(319, 319, 319))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(44, 44, 44)
                .addComponent(title1)
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(usernameLabel)
                    .addComponent(usernameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(passwordLabel)
                    .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(passwordRepeatLabel)
                    .addComponent(passwordRepeatField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(roleLabel)
                    .addComponent(roleComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(44, 44, 44)
                .addComponent(insertButton)
                .addGap(60, 60, 60)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(userComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(userLabel))
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(updateButton)
                    .addComponent(deleteButton))
                .addContainerGap(134, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    // Evento del botón AGREGAR, aquí se manejarán las inserciones.
    private void insertButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertButtonActionPerformed
        // TODO add your handling code here:
        if (usernameTextField.getText().trim().isEmpty()
                || passwordField.getText().trim().isEmpty()
                || passwordRepeatField.getText().trim().isEmpty()
                || roleComboBox.getSelectedIndex() == 0) {

            // Mostrar mensaje de error si faltan campos
            javax.swing.JOptionPane.showMessageDialog(this,
                    "Por favor, rellene todos los campos antes de continuar.",
                    "Error",
                    javax.swing.JOptionPane.ERROR_MESSAGE);
        } else {
            String username = usernameTextField.getText().trim();
            String password = passwordField.getText().trim();
            String repeatPassword = passwordRepeatField.getText().trim();
            String role = (String) roleComboBox.getSelectedItem();

            if (!repeatPassword.equals(password)) {
                javax.swing.JOptionPane.showMessageDialog(this,
                        "Las contraseñas no son iguales.",
                        "Error",
                        javax.swing.JOptionPane.ERROR_MESSAGE);
            } else {
                Usuario usuario = new Usuario();
                usuario.setUsername(username);
                usuario.setPassword(password);
                //Switch para manejar el ROL
                switch (role) {
                    case "ADMINISTRADOR" ->
                        usuario.setRol(Rol.ADMINISTRADOR);
                    case "EMPLEADO" ->
                        usuario.setRol(Rol.EMPLEADO);
                }
                try {
                    userDAO.insertarUsuario(usuario);
                    javax.swing.JOptionPane.showMessageDialog(this,
                            "Usuario registrado exitosamente.",
                            "Éxito",
                            javax.swing.JOptionPane.INFORMATION_MESSAGE);

                    // Actualizar ComboBoxes después de insertar
                    updateUsers();
                    limpiarCampos();
                } catch (SQLException ex) {
                    javax.swing.JOptionPane.showMessageDialog(this,
                            "Error al registrar el usuario: " + ex.getMessage(),
                            "Error",
                            javax.swing.JOptionPane.ERROR_MESSAGE);
                }

            }

        }
        updateUsers(); //Después de insertar debe actualizar el combo box
    }//GEN-LAST:event_insertButtonActionPerformed

    // Evento del botón ACTUALIZAR, aquí se manejarán las actualizaciones.
    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        // TODO add your handling code here:
        // Verificamos que se haya seleccionado un usuario para actualizar
        String usuarioSeleccionado = (String) userComboBox.getSelectedItem();
        if (userComboBox.getSelectedIndex() == 0) {
            javax.swing.JOptionPane.showMessageDialog(this,
                    "Por favor, escoge un usuario antes de actualizar.",
                    "Error",
                    javax.swing.JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            // Extraer el ID del usuario del texto (formato: "ID: <id> Nombre: <nombre>")
            int idUsuario = Integer.parseInt(usuarioSeleccionado.split(":")[1].trim().split(" ")[0]);
            Usuario usuario = userDAO.obtenerUsuarioPorId(idUsuario); // Obtener el usuario desde el DAO

            // Obtener los valores actuales del usuario
            String usernameOriginal = usuario.getUsername();
            String passwordOriginal = usuario.getPassword();
            String rolOriginal = usuario.getRol().toString();

            // Obtener los nuevos valores desde la UI
            String nuevoUsername = usernameTextField.getText().trim();
            String nuevoPassword = passwordField.getText().trim();
            String repeatPassword = passwordRepeatField.getText().trim();
            String nuevoRol = (String) roleComboBox.getSelectedItem();

            // Validamos que la contraseña nueva coincida con la repetida
            if (!nuevoPassword.isEmpty() && !nuevoPassword.equals(repeatPassword)) {
                javax.swing.JOptionPane.showMessageDialog(this,
                        "Las contraseñas no son iguales.",
                        "Error",
                        javax.swing.JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Validar y actualizar el nombre de usuario solo si ha cambiado
            if (!nuevoUsername.isEmpty() && !nuevoUsername.equals(usernameOriginal)) {
                usuario.setUsername(nuevoUsername);
            }

            // Validar y actualizar la contraseña solo si ha cambiado y si se ingresó una nueva
            if (!nuevoPassword.isEmpty() && !nuevoPassword.equals(passwordOriginal)) {
                usuario.setPassword(nuevoPassword); // Si se ingresó nueva contraseña, la actualizamos
            } 

            // Validar y actualizar el rol solo si ha cambiado
            if (nuevoRol != null && !nuevoRol.equals(rolOriginal)) {
                switch (nuevoRol) {
                    case "ADMINISTRADOR":
                        usuario.setRol(Rol.ADMINISTRADOR);
                        break;
                    case "EMPLEADO":
                        usuario.setRol(Rol.EMPLEADO);
                        break;
                    default:
                        // Si no se selecciona un rol válido, no actualizamos el rol
                        break;
                }
            }

            // Llamar al DAO para realizar la actualización en la base de datos
            if (userDAO.actualizarUsuario(usuario)) {
                javax.swing.JOptionPane.showMessageDialog(this,
                        "Usuario actualizado exitosamente.",
                        "Éxito",
                        javax.swing.JOptionPane.INFORMATION_MESSAGE);
                // Actualizar ComboBox después de la actualización
                updateUsers();
                limpiarCampos();
            } else {
                javax.swing.JOptionPane.showMessageDialog(this,
                        "No se pudo actualizar el usuario.",
                        "Error",
                        javax.swing.JOptionPane.ERROR_MESSAGE);
                updateUsers();
            }

        } catch (SQLException ex) {
            javax.swing.JOptionPane.showMessageDialog(this,
                    "Error al actualizar el usuario: " + ex.getMessage(),
                    "Error",
                    javax.swing.JOptionPane.ERROR_MESSAGE);
            updateUsers();
        } catch (Exception ex) {  // Para otros tipos de excepciones
            javax.swing.JOptionPane.showMessageDialog(this,
                    "Error inesperado: " + ex.getMessage(),
                    "Error",
                    javax.swing.JOptionPane.ERROR_MESSAGE);
        }
        // IMPORTANTE: Tomar ID de usuario del ComboBox
        updateUsers(); // Después de actualizar debe actualizar el combo box
    }//GEN-LAST:event_updateButtonActionPerformed

    // Evento del botón ELIMINAR, aquí se manejarán los elementos eliminados.
    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
// TODO add your handling code here:
        String usuarioSeleccionado = (String) userComboBox.getSelectedItem();
        if (userComboBox.getSelectedIndex() == 0) {
            javax.swing.JOptionPane.showMessageDialog(this,
                    "Por favor, escoge un usuario antes de eliminar.",
                    "Error",
                    javax.swing.JOptionPane.ERROR_MESSAGE);
            return;
        }
        // IMPORTANTE: Tomar ID de usuario del ComboBox
        try {
            // Extraer el ID del usuario del texto (formato: "ID: <id> Nombre: <nombre>")
            int idUsuario = Integer.parseInt(usuarioSeleccionado.split(":")[1].trim().split(" ")[0]);

            // Confirmar eliminación con el usuario
            int confirmacion = javax.swing.JOptionPane.showConfirmDialog(this,
                    "¿Está seguro de que desea eliminar este usuario?\n" + usuarioSeleccionado,
                    "Confirmar eliminación",
                    javax.swing.JOptionPane.YES_NO_OPTION);

            if (confirmacion == javax.swing.JOptionPane.YES_OPTION) {
                // Llamar al DAO para eliminar el empleado
                userDAO.eliminarUsuario(idUsuario);  // Asegúrate que este método pueda lanzar SQLException
                javax.swing.JOptionPane.showMessageDialog(this,
                        "Empleado eliminado exitosamente.",
                        "Éxito",
                        javax.swing.JOptionPane.INFORMATION_MESSAGE);

                // Actualizar los ComboBoxes después de eliminar
                updateUsers();
                limpiarCampos();
            }
        } catch (SQLException ex) {
            javax.swing.JOptionPane.showMessageDialog(this,
                    "Error al eliminar el empleado: " + ex.getMessage(),
                    "Error",
                    javax.swing.JOptionPane.ERROR_MESSAGE);
        } catch (Exception ex) {  // Para otros tipos de excepciones
            javax.swing.JOptionPane.showMessageDialog(this,
                    "Error inesperado: " + ex.getMessage(),
                    "Error",
                    javax.swing.JOptionPane.ERROR_MESSAGE);
        }
        // IMPORTANTE: Tomar ID de empleado del ComboBox
        updateUsers(); // Después de eliminar debe actualizar el combo box
    }//GEN-LAST:event_deleteButtonActionPerformed

    // Actualizar combo box de usuarios
    private void updateUsers() {
        List<Usuario> usuarios = userDAO.obtenerUsuarios();
        userComboBox.removeAllItems();
        userComboBox.addItem("Selecciona un usuario para actualizar/eliminar");

        for (Usuario usuario : usuarios) {
            userComboBox.addItem("ID: " + usuario.getId_usuario() + " Nombre de Usuario: " + usuario.getUsername());
        }
    }

    private void limpiarCampos() {
        usernameTextField.setText("");
        passwordField.setText("");
        passwordRepeatField.setText("");
        roleComboBox.setSelectedIndex(0);
        userComboBox.setSelectedIndex(0);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton insertButton;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPasswordField passwordField;
    private javax.swing.JLabel passwordLabel;
    private javax.swing.JPasswordField passwordRepeatField;
    private javax.swing.JLabel passwordRepeatLabel;
    private javax.swing.JComboBox<String> roleComboBox;
    private javax.swing.JLabel roleLabel;
    private javax.swing.JLabel title1;
    private javax.swing.JButton updateButton;
    private javax.swing.JComboBox<String> userComboBox;
    private javax.swing.JLabel userLabel;
    private javax.swing.JLabel usernameLabel;
    private javax.swing.JTextField usernameTextField;
    // End of variables declaration//GEN-END:variables
}

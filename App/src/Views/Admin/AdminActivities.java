/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package Views.Admin;

import Models.*;
import Controller.*;
import java.util.List;
import javax.swing.table.DefaultTableModel;


/**
 *
 * @author gerar
 */
public class AdminActivities extends javax.swing.JPanel {
    ActividadLimpiezaDAO actLimDAO = new ActividadLimpiezaDAO();
    CuadrillaDAO squadDAO = new CuadrillaDAO();
    ColoniasDAO colDAO = new ColoniasDAO();
    ActividadColoniaDAO activityCD = new ActividadColoniaDAO();

    /**
     * Creates new form AdminUsers
     */
    public AdminActivities() {
        initComponents();
        updateComboBox(); //Actualizar combo box cada vez que entra al Panel
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        title1 = new javax.swing.JLabel();
        descriptionLabel = new javax.swing.JLabel();
        dateLabel = new javax.swing.JLabel();
        squadLabel = new javax.swing.JLabel();
        descriptionTextField = new javax.swing.JTextField();
        squadComboBox = new javax.swing.JComboBox<>();
        insertButton = new javax.swing.JButton();
        updateButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        activityLabel = new javax.swing.JLabel();
        activityComboBox = new javax.swing.JComboBox<>();
        colonyLabel = new javax.swing.JLabel();
        colonyComboBox = new javax.swing.JComboBox<>();
        deleteColonyButton = new javax.swing.JButton();
        asignColonyButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        activityColoniesTable = new javax.swing.JTable();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        title1.setFont(new java.awt.Font("Bahnschrift", 1, 28)); // NOI18N
        title1.setText("ADMINISTRAR ACTIVIDADES");

        descriptionLabel.setFont(new java.awt.Font("Poppins SemiBold", 0, 14)); // NOI18N
        descriptionLabel.setText("Nombre de la Actividad:");

        dateLabel.setFont(new java.awt.Font("Poppins SemiBold", 0, 14)); // NOI18N
        dateLabel.setText("Fecha:");

        squadLabel.setFont(new java.awt.Font("Poppins SemiBold", 0, 14)); // NOI18N
        squadLabel.setText("Cuadrilla:");

        descriptionTextField.setFont(new java.awt.Font("Poppins SemiBold", 0, 12)); // NOI18N
        descriptionTextField.setToolTipText("Ingresa el nombre de la actividad");

        squadComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Escoge la cuadrilla:" }));
        squadComboBox.setToolTipText("Escoge la cuadrilla a la cual se le asignará la actividad");

        insertButton.setBackground(new java.awt.Color(128, 237, 153));
        insertButton.setFont(new java.awt.Font("Bahnschrift", 0, 14)); // NOI18N
        insertButton.setText("AGREGAR");
        insertButton.setToolTipText("Agregar una nueva actividad");
        insertButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertButtonActionPerformed(evt);
            }
        });

        updateButton.setBackground(new java.awt.Color(20, 145, 155));
        updateButton.setFont(new java.awt.Font("Bahnschrift", 0, 14)); // NOI18N
        updateButton.setText("ACTUALIZAR");
        updateButton.setToolTipText("Actualiza una actividad");
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });

        deleteButton.setBackground(new java.awt.Color(255, 0, 0));
        deleteButton.setFont(new java.awt.Font("Bahnschrift", 0, 14)); // NOI18N
        deleteButton.setText("ELIMINAR");
        deleteButton.setToolTipText("Elimina una actividad");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(33, 58, 87));

        jLabel2.setFont(new java.awt.Font("Bahnschrift", 1, 36)); // NOI18N
        jLabel2.setText("SISTEMA DE LIMPIEZA");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(414, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(402, 402, 402))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(64, 64, 64)
                .addComponent(jLabel2)
                .addContainerGap(41, Short.MAX_VALUE))
        );

        activityLabel.setFont(new java.awt.Font("Poppins SemiBold", 0, 14)); // NOI18N
        activityLabel.setText("Actividad:");

        activityComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Escoge la actividad:" }));
        activityComboBox.setToolTipText("Escoge la actividad que se actualizará o eliminará");

        colonyLabel.setFont(new java.awt.Font("Poppins SemiBold", 0, 14)); // NOI18N
        colonyLabel.setText("Colonia:");

        colonyComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Escoge la colonia:" }));
        colonyComboBox.setToolTipText("Escoge la colonia a la cual se le asignará la activdad");

        deleteColonyButton.setBackground(new java.awt.Color(255, 0, 0));
        deleteColonyButton.setFont(new java.awt.Font("Bahnschrift", 0, 14)); // NOI18N
        deleteColonyButton.setText("DESASIGNAR");
        deleteColonyButton.setToolTipText("Elimina una colonia de la actividad");
        deleteColonyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteColonyButtonActionPerformed(evt);
            }
        });

        asignColonyButton.setBackground(new java.awt.Color(255, 255, 0));
        asignColonyButton.setFont(new java.awt.Font("Bahnschrift", 0, 14)); // NOI18N
        asignColonyButton.setText("ASIGNAR");
        asignColonyButton.setToolTipText("Asignar una colonia a la actividad");
        asignColonyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                asignColonyButtonActionPerformed(evt);
            }
        });

        activityColoniesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Actividad", "Colonia"
            }
        ));
        jScrollPane2.setViewportView(activityColoniesTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(548, 548, 548)
                .addComponent(insertButton)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addComponent(activityLabel)
                .addGap(26, 26, 26)
                .addComponent(activityComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 441, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(colonyLabel)
                .addGap(26, 26, 26)
                .addComponent(colonyComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 441, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(100, 100, 100)
                .addComponent(updateButton)
                .addGap(185, 185, 185)
                .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(asignColonyButton)
                .addGap(176, 176, 176)
                .addComponent(deleteColonyButton, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(78, 78, 78))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(title1)
                        .addGap(402, 402, 402))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(descriptionLabel)
                        .addGap(18, 18, 18)
                        .addComponent(descriptionTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 307, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(334, 334, 334))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(squadLabel)
                            .addComponent(dateLabel))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(squadComboBox, 0, 281, Short.MAX_VALUE)
                            .addComponent(jDateChooser1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(359, 359, 359))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 825, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(139, 139, 139))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36)
                .addComponent(title1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(descriptionLabel)
                    .addComponent(descriptionTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(dateLabel)
                    .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(squadComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(squadLabel))
                .addGap(18, 18, 18)
                .addComponent(insertButton)
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(activityComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(activityLabel)
                    .addComponent(colonyComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(colonyLabel))
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(updateButton)
                    .addComponent(deleteButton)
                    .addComponent(asignColonyButton)
                    .addComponent(deleteColonyButton))
                .addGap(33, 33, 33)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(47, 47, 47))
        );
    }// </editor-fold>//GEN-END:initComponents

    // Evento del botón AGREGAR, aquí se manejarán las inserciones.
    private void insertButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertButtonActionPerformed
        // TODO add your handling code here:
        if (descriptionTextField.getText().trim().isEmpty() || 
        jDateChooser1.getDate() == null) {

        // Mostrar mensaje de error
        javax.swing.JOptionPane.showMessageDialog(this, 
            "Por favor, rellene todos los campos antes de continuar.", 
            "Error", 
            javax.swing.JOptionPane.ERROR_MESSAGE);
    } else {
        // Capturar los datos del formulario
        String descripcion = descriptionTextField.getText().trim();
        java.util.Date fecha = jDateChooser1.getDate();
        String cuadrillaSeleccionada = (String) squadComboBox.getSelectedItem();

        // Extraer el ID de cuadrilla del texto seleccionado
        int idCuadrilla = Integer.parseInt(cuadrillaSeleccionada.split(":")[1].trim().split(" ")[0]);

        // Crear la actividad con los datos capturados
        Cuadrilla cuadrilla = new Cuadrilla();
        cuadrilla.setId_cuadrilla(idCuadrilla);

        ActividadLimpieza nuevaActividad = new ActividadLimpieza();
        nuevaActividad.setDescripcion(descripcion);
        nuevaActividad.setFecha(fecha);
        nuevaActividad.setCuadrilla(cuadrilla);

        // Llamar al método de inserción en el DAO
        try {
            actLimDAO.insertarActividad(nuevaActividad);
            javax.swing.JOptionPane.showMessageDialog(this, 
                "Actividad registrada exitosamente.", 
                "Éxito", 
                javax.swing.JOptionPane.INFORMATION_MESSAGE);

            // Actualizar los ComboBoxes
            updateComboBox();
        } catch (Exception ex) {
            javax.swing.JOptionPane.showMessageDialog(this, 
                "Error al registrar la actividad: " + ex.getMessage(), 
                "Error", 
                javax.swing.JOptionPane.ERROR_MESSAGE);
        }
    }
         updateComboBox();//Después de insertar debe actualizar el combo box
    }//GEN-LAST:event_insertButtonActionPerformed

    // Evento del botón ACTUALIZAR, aquí se manejarán las actualizaciones.
    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        // TODO add your handling code here:
    String selectedActivity = (String) activityComboBox.getSelectedItem();
    String[] parts = selectedActivity.split(":"); // Dividir por el primer ":"
    
    if (parts.length > 1) {
        // Convertir la primera parte (ID de la actividad)
        int activityId = Integer.parseInt(parts[0].trim());

        // Obtener los datos del formulario
        String descripcion = descriptionTextField.getText().trim();
        java.util.Date fecha = jDateChooser1.getDate();
        String cuadrillaSeleccionada = (String) squadComboBox.getSelectedItem();

        // Extraer el ID de cuadrilla
        int idCuadrilla = Integer.parseInt(cuadrillaSeleccionada.split(":")[1].trim().split(" ")[0]);

        // Crear un objeto Cuadrilla con el ID seleccionado
        Cuadrilla cuadrilla = new Cuadrilla();
        cuadrilla.setId_cuadrilla(idCuadrilla);

        // Crear el objeto ActividadLimpieza con los datos ingresados
        ActividadLimpieza actividad = new ActividadLimpieza();
        actividad.setId_actividad(activityId); // Seteamos el ID de la actividad a actualizar
        actividad.setDescripcion(descripcion);
        actividad.setFecha(fecha);
        actividad.setCuadrilla(cuadrilla);

        // Llamar al método de actualización en el DAO
        try {
            ActLimDAO.actualizarActividad(actividad);
            javax.swing.JOptionPane.showMessageDialog(this, 
                "Actividad actualizada exitosamente.", 
                "Éxito", 
                javax.swing.JOptionPane.INFORMATION_MESSAGE);
            
            // Actualizar el ComboBox con las actividades
            updateComboBox();
        } catch (Exception ex) {
            javax.swing.JOptionPane.showMessageDialog(this, 
                "Error al actualizar la actividad: " + ex.getMessage(), 
                "Error", 
                javax.swing.JOptionPane.ERROR_MESSAGE);
        }   
    } else {
        javax.swing.JOptionPane.showMessageDialog(this, 
            "Error: Formato de actividad incorrecto.", 
            "Error", 
            javax.swing.JOptionPane.ERROR_MESSAGE);
    }     
        // IMPORTANTE: Tomar ID de actividad del ComboBox
         updateComboBox(); //Después de actualizar debe actualizar el combo box
    }//GEN-LAST:event_updateButtonActionPerformed

    // Evento del botón ELIMINAR, aquí se manejarán los elementos eliminados.
    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        // TODO add your handling code here:
        String actividadSeleccionada = (String) activityComboBox.getSelectedItem();
        System.out.println("Texto seleccionado: " + actividadSeleccionada); // Debug

        try {
            // Extraer el ID de la actividad
            int idActividad = Integer.parseInt(actividadSeleccionada.split(":")[1].trim().split(" ")[0]);
            System.out.println("ID extraído: " + idActividad); // Debug

            // Confirmar eliminación
            int confirmacion = javax.swing.JOptionPane.showConfirmDialog(this, 
                "¿Está seguro de que desea eliminar esta actividad?\n" + actividadSeleccionada, 
                "Confirmar eliminación", 
                javax.swing.JOptionPane.YES_NO_OPTION);

            if (confirmacion == javax.swing.JOptionPane.YES_OPTION) {
                actLimDAO.eliminarActividad(idActividad); // Llama al DAO
                javax.swing.JOptionPane.showMessageDialog(this, 
                    "Actividad eliminada exitosamente.", 
                    "Éxito", 
                    javax.swing.JOptionPane.INFORMATION_MESSAGE);

                updateComboBox(); // Actualizar ComboBox
            }
        } catch (Exception ex) {
            javax.swing.JOptionPane.showMessageDialog(this, 
                "Error al eliminar la actividad: " + ex.getMessage(), 
                "Error", 
                javax.swing.JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void deleteColonyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteColonyButtonActionPerformed
        // TODO add your handling code here:
        // Obtener el texto seleccionado en el combo box
        updateComboBox();
    }//GEN-LAST:event_deleteColonyButtonActionPerformed

    private void asignColonyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_asignColonyButtonActionPerformed
        // TODO add your handling code here:
        
        // IMPORTANTE: Tomar ID de actividad del ComboBox
        // IMPORTANTE: Tomar ID de colonia del ComboBox
        updateComboBox();//Después de eliminar debe actualizar el combo box
    }//GEN-LAST:event_asignColonyButtonActionPerformed

    // Actualizar combo box de cuadrillas
    private void updateSquads(){
        List<Cuadrilla> squads = squadDAO.obtenerCuadrillas();
        squadComboBox.removeAllItems();
        
        for(Cuadrilla squad: squads){
            squadComboBox.addItem("ID: " + squad.getId_cuadrilla() + " Nombre de Cuadrilla: " + squad.getNombre());
        }
    }
    
        // Actualizar combo box de actividades
    private void updateActivities(){
        List<ActividadLimpieza> activities = actLimDAO.obtenerTodasLasActividades();
        activityComboBox.removeAllItems();
        
        for(ActividadLimpieza activity: activities){
            activityComboBox.addItem("ID: " + activity.getId_actividad() + " Nombre: " + activity.getDescripcion());
        }
    }
    
        // Actualizar combo box de colonias
     private void updateColonies(){
        List<Colonia> colonies = colDAO.obtenerTodasLasColonias();
        colonyComboBox.removeAllItems();
        
        for(Colonia colony: colonies){
            colonyComboBox.addItem("ID: " + colony.getId_colonia() + " Colonia: " + colony.getNombre());
        }
    }
    
    private void updateComboBox(){
        updateActivities();
        updateSquads();
        updateColonies();
        showActivities();
    }
    
    private void showActivities() {
        List<ActividadColonia> actividadesColonia = activityCD.obtenerActividadesColonia();
        DefaultTableModel model = (DefaultTableModel) activityColoniesTable.getModel();
        model.setRowCount(0);

        // Iterar sobre cada ActividadColonia
        for (ActividadColonia actividadColonia : actividadesColonia) {
            // Para cada colonia asociada a la actividad, agregar una fila
            for (Colonia colonia : actividadColonia.getColonias()) {
                Object[] fila = {
                    actividadColonia.getActividad().getDescripcion(), 
                    colonia.getNombre() 
                };
                model.addRow(fila);
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable activityColoniesTable;
    private javax.swing.JComboBox<String> activityComboBox;
    private javax.swing.JLabel activityLabel;
    private javax.swing.JButton asignColonyButton;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox<String> colonyComboBox;
    private javax.swing.JLabel colonyLabel;
    private javax.swing.JLabel dateLabel;
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton deleteColonyButton;
    private javax.swing.JLabel descriptionLabel;
    private javax.swing.JTextField descriptionTextField;
    private javax.swing.JButton insertButton;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JComboBox<String> squadComboBox;
    private javax.swing.JLabel squadLabel;
    private javax.swing.JLabel title1;
    private javax.swing.JButton updateButton;
    // End of variables declaration//GEN-END:variables
}

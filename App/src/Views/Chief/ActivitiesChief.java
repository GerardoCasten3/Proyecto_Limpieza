/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package Views.Chief;

import Views.Admin.*;
import Models.*;
import Controller.*;
import java.util.List;
import javax.swing.*;
import javax.swing.table.*;
import java.awt.*;
import java.io.*;
import java.nio.file.*;
import java.nio.file.StandardCopyOption;
import java.util.regex.*;

/**
 *
 * @author gerar
 */
public class ActivitiesChief extends javax.swing.JPanel {

    UsuarioDAO userDAO = new UsuarioDAO();
    ActividadLimpiezaDAO actDAO = new ActividadLimpiezaDAO();
    EmpleadoDAO empDAO = new EmpleadoDAO();
    private String rutaEvidencia;

    /**
     * Creates new form ListUsers
     */
    public ActivitiesChief() {
        initComponents();
        updateInfo();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        listUsersTitle = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        activityTable = new javax.swing.JTable();
        activityLabel = new javax.swing.JLabel();
        activityComboBox = new javax.swing.JComboBox<>();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        imageLabel = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        retroTextArea = new javax.swing.JTextArea();
        retroLabel1 = new javax.swing.JLabel();
        evidenceButton = new javax.swing.JButton();
        completedLabel = new javax.swing.JLabel();
        completedCheckBox = new javax.swing.JCheckBox();
        saveButton = new javax.swing.JButton();

        setPreferredSize(new java.awt.Dimension(1200, 777));
        setRequestFocusEnabled(false);

        listUsersTitle.setFont(new java.awt.Font("Bahnschrift", 1, 24)); // NOI18N
        listUsersTitle.setText("ACTIVIDADES");

        activityTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "ID de Actividad", "Descripción", "Fecha", "Retroalimentación", "Evidencia", "Cuadrilla", "Completado"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(activityTable);

        activityLabel.setFont(new java.awt.Font("Poppins SemiBold", 0, 14)); // NOI18N
        activityLabel.setText("Actividad:");

        activityComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Escoge la actividad:" }));
        activityComboBox.setToolTipText("Escoge la actividad a actualizar");

        jPanel1.setBackground(new java.awt.Color(33, 58, 87));

        jLabel2.setFont(new java.awt.Font("Bahnschrift", 1, 36)); // NOI18N
        jLabel2.setText("SISTEMA DE LIMPIEZA");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(402, 402, 402))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(64, 64, 64)
                .addComponent(jLabel2)
                .addContainerGap(41, Short.MAX_VALUE))
        );

        imageLabel.setFont(new java.awt.Font("Poppins SemiBold", 0, 14)); // NOI18N
        imageLabel.setText("Imagen de Evidencia:");

        retroTextArea.setColumns(20);
        retroTextArea.setFont(new java.awt.Font("Poppins Medium", 0, 12)); // NOI18N
        retroTextArea.setRows(5);
        retroTextArea.setToolTipText("Escribe aquí la retroalimentación de la actividad");
        jScrollPane2.setViewportView(retroTextArea);

        retroLabel1.setFont(new java.awt.Font("Poppins SemiBold", 0, 14)); // NOI18N
        retroLabel1.setText("Retroalimentación:");

        evidenceButton.setBackground(new java.awt.Color(0, 204, 204));
        evidenceButton.setFont(new java.awt.Font("Poppins SemiBold", 0, 12)); // NOI18N
        evidenceButton.setForeground(new java.awt.Color(0, 0, 0));
        evidenceButton.setText("Carga la imagen");
        evidenceButton.setToolTipText("Carga aquí la imagen de evidencia de la actividad");
        evidenceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                evidenceButtonActionPerformed(evt);
            }
        });

        completedLabel.setFont(new java.awt.Font("Poppins SemiBold", 0, 14)); // NOI18N
        completedLabel.setText("¿Se completó la actividad?");

        completedCheckBox.setFont(new java.awt.Font("Poppins SemiBold", 0, 12)); // NOI18N
        completedCheckBox.setText("Completa");
        completedCheckBox.setToolTipText("Marca la casilla si la actividad se completó con éxito");

        saveButton.setBackground(new java.awt.Color(0, 204, 51));
        saveButton.setFont(new java.awt.Font("Poppins SemiBold", 0, 12)); // NOI18N
        saveButton.setForeground(new java.awt.Color(0, 0, 0));
        saveButton.setText("Guardar");
        saveButton.setToolTipText("Guarda los cambios realizados en la actividad");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(522, 522, 522)
                .addComponent(listUsersTitle)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(97, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 351, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(activityComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 351, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(retroLabel1)
                                .addGap(115, 115, 115))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(91, 91, 91)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(imageLabel)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(6, 6, 6)
                                        .addComponent(evidenceButton)))
                                .addGap(110, 110, 110))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(activityLabel)
                                .addGap(147, 147, 147))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(completedLabel)
                                .addGap(91, 91, 91))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(completedCheckBox)
                                .addGap(141, 141, 141)))
                        .addGap(413, 413, 413))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1025, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(78, 78, 78))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(saveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(543, 543, 543))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(listUsersTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(activityLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(activityComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(retroLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(imageLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(evidenceButton)
                .addGap(18, 18, 18)
                .addComponent(completedLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(completedCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(saveButton)
                .addGap(36, 36, 36)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void evidenceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_evidenceButtonActionPerformed
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Seleccione un archivo de evidencia");

        int userSelection = fileChooser.showOpenDialog(this);

        if (userSelection == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            String destinoDirectorio = "C:\\Users\\gerar\\OneDrive\\Escritorio\\Universidad\\7mo Semestre\\Diseño y Arquitectura de Software\\Proyecto_Limpieza\\App\\src\\Images\\";
            String destinoRuta = destinoDirectorio + selectedFile.getName();

            File directorio = new File(destinoDirectorio);
            if (!directorio.exists()) {
                directorio.mkdirs();
            }

            try {
                Files.copy(selectedFile.toPath(), Paths.get(destinoRuta), StandardCopyOption.REPLACE_EXISTING);
                rutaEvidencia = destinoRuta;
                JOptionPane.showMessageDialog(this, "Archivo guardado con éxito en:\n" + rutaEvidencia);
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "Error al guardar el archivo: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_evidenceButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        // TODO add your handling code here:
        // Verificar que se haya seleccionado una actividad válida (índice diferente a 0)
        if (activityComboBox.getSelectedIndex() == 0) {
            JOptionPane.showMessageDialog(this, "Por favor, selecciona una actividad válida.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Verificar que el campo de retroalimentación no esté vacío
        if (retroTextArea.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Por favor, proporciona retroalimentación para la actividad.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Verificar que se haya cargado una evidencia (rutaEvidencia no nula)
        if (rutaEvidencia == null || rutaEvidencia.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Por favor, carga una imagen como evidencia.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Verificar que la actividad esté marcada como completada
        if (!completedCheckBox.isSelected()) {
            JOptionPane.showMessageDialog(this, "Por favor, marca la actividad como completada.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Si todas las validaciones son correctas, se realiza el guardado
        try {
            // Aquí puedes implementar la lógica de guardado, como actualizar la base de datos.
            int id_actividad = getSelectedActivityId();
            String retroalimentacion = retroTextArea.getText();
            boolean checked = completedCheckBox.isSelected();   
            Usuario usuario = Sesion.getInstance().getUsuarioActivo();
            actDAO.actualizarRetroalimentacionImagen(retroalimentacion, rutaEvidencia, checked, id_actividad, usuario.getId_usuario());
            updateInfo();
                    
            JOptionPane.showMessageDialog(this, "La actividad se ha guardado correctamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Ocurrió un error al guardar la actividad: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_saveButtonActionPerformed

    private int getSelectedActivityId() {
    String selectedItem = (String) activityComboBox.getSelectedItem();

    if (selectedItem != null) {
        Pattern pattern = Pattern.compile("ID: (\\d+)");
        Matcher matcher = pattern.matcher(selectedItem);

        if (matcher.find()) {
            return Integer.parseInt(matcher.group(1)); 
        }
    }
    return -1;
}
    
    private void showActivities() {
        Usuario usuario = Sesion.getInstance().getUsuarioActivo();
        Empleado empleado = empDAO.obtenerEmpleadoPorIdUsuario(usuario.getId_usuario());
        List<ActividadLimpieza> actividad = actDAO.obtenerActividadesPorIdCuadrilla(empleado.getCuadrilla().getId_cuadrilla());
        DefaultTableModel model = (DefaultTableModel) activityTable.getModel();
        model.setRowCount(0);

        for (ActividadLimpieza act : actividad) {
            Object[] row = {
                act.getId_actividad(),
                act.getDescripcion(),
                act.getFecha(),
                act.getRetroalimentacion(),
                act.getImagenEvidencia(), // Ruta de la imagen
                act.getCuadrilla().getNombre(),
                act.isTerminado()
            };
            model.addRow(row);
        }

        // Configurar renderizador para la columna de imágenes
        activityTable.setRowHeight(80);
        configureTableRenderer();
    }

    public class ImageRenderer extends DefaultTableCellRenderer {

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value,
                boolean isSelected, boolean hasFocus,
                int row, int column) {
            JLabel label = new JLabel();
            label.setHorizontalAlignment(JLabel.CENTER);
            label.setVerticalAlignment(JLabel.CENTER);
            if (value != null) {
                String imagePath = value.toString();
                File imageFile = new File(imagePath);

                // Verificar si la imagen existe como ruta absoluta o relativa
                if (!imageFile.exists()) {
                    imagePath = System.getProperty("user.dir") + "/" + imagePath;
                    imageFile = new File(imagePath);
                }

                if (imageFile.exists()) {
                    ImageIcon icon = new ImageIcon(imagePath);
                    // Escalar la imagen si es necesario
                    Image scaledImage = icon.getImage().getScaledInstance(120, 120, Image.SCALE_SMOOTH);
                    label.setIcon(new ImageIcon(scaledImage));
                } else {
                    label.setText("Imagen no encontrada");
                }
            }
            return label;
        }
    }

    private void configureTableRenderer() {
        activityTable.getColumnModel().getColumn(4).setCellRenderer(new ImageRenderer());
    }

    // Actualizar combo box de actividades
    private void updateActivities() {
        Usuario usuario = Sesion.getInstance().getUsuarioActivo();
        Empleado empleado = empDAO.obtenerEmpleadoPorIdUsuario(usuario.getId_usuario());
        List<ActividadLimpieza> activities = actDAO.obtenerActividadesPorIdCuadrilla(empleado.getCuadrilla().getId_cuadrilla());
        activityComboBox.removeAllItems();
        activityComboBox.addItem("Escoge una actividad:");

        for (ActividadLimpieza activity : activities) {
            activityComboBox.addItem("ID: " + activity.getId_actividad() + " Nombre: " + activity.getDescripcion());
        }
    }

    private void updateInfo() {
        showActivities();
        updateActivities();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> activityComboBox;
    private javax.swing.JLabel activityLabel;
    private javax.swing.JTable activityTable;
    private javax.swing.JCheckBox completedCheckBox;
    private javax.swing.JLabel completedLabel;
    private javax.swing.JButton evidenceButton;
    private javax.swing.JLabel imageLabel;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel listUsersTitle;
    private javax.swing.JLabel retroLabel1;
    private javax.swing.JTextArea retroTextArea;
    private javax.swing.JButton saveButton;
    // End of variables declaration//GEN-END:variables
}
